name: Build

on:
  workflow_call:

# For details on the macOS enviornment see https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
#
# We try to align the versions of tools with what is already available on the image to reduce the time it takes to run our CI.
# At the time of writing(October 2020) these are:
#
# Node: 12.18.4 (Set via .nvmrc)
# Bundler: 2.2.3 (Installed below)
#

defaults:
  run:
    shell: bash -l {0}

jobs:
  Setup:
    name: Install Dependencies
    runs-on: macos-latest
    permissions:
      statuses: write
      pull-requests: write
    steps:
      # Checkout the repo
      - uses: actions/checkout@v3

      # If a different version of bundler has been used, CI will fail with a very unhelpful error message at `bundle install`.
      # This is hopefully somewhat more helpful:
      - name: Verify Bundler Version
        run: if [[ $(cat Gemfile.lock | sed -n '/BUNDLED WITH/{n;p;}' | sed '/^$/d;s/[[:blank:]]//g') != "2.2.3" ]]; then echo "Error - Gemfile.lock should be bundled with bundler 2.2.3"; exit 64; fi

      - name: Set Ruby version
        uses: ruby/setup-ruby@v1 # Sets ruby version via `.ruby-version`

  Lint:
    name: Lint Project
    runs-on: macos-latest
    needs: [Setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Node modules
        uses: actions/cache@v3
        id: cache_node_modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: nvm install
        run: nvm install

      - name: NPM ci
        if: steps.cache_node_modules.outputs.cache-hit != 'true'
        run: nvm use && npm ci

      - name: Run NPM build
        run: npm run build

      - name: Cache Bundler install Gems
        uses: actions/cache@v3
        id: cache_bundler_install_gems
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ env.ImageVersion }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ env.ImageVersion }}

      - name: Cache Pods
        uses: actions/cache@v3
        id: cache_pods
        with:
          path: Example/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Bundle Install
        run: bundle install --jobs 4 --retry 3

      - name: Pod Install
        if: steps.cache_pods.outputs.cache-hit != 'true'
        run: bundle exec pod install
        working-directory: Example

      - name: Install clang-format
        run: brew install clang-format

      - name: Check pristine
        run: ./scripts/lint

      - name: Run Swiftlint
        run: Pods/SwiftLint/swiftlint lint --strict --config .swiftlint.yml
        working-directory: Example

      - name: Run danger
        run: npm run danger
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  AnalyzePods:
    name: Analyzing pods
    runs-on: macos-latest
    needs: [Setup]
    strategy:
      fail-fast: false
      matrix:
        schemes: [common, uikit, swiftui]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Bundler install Gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ env.ImageVersion }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ env.ImageVersion }}

      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: Example/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Bundle Install
        run: bundle install --jobs 4 --retry 3

      - name: Pod Install
        run: bundle exec pod install
        working-directory: Example

      - name: Select Xcode 14
        run: sudo xcode-select --switch /Applications/Xcode_14.2.app

      - name: Analyze
        run: ./scripts/ci ${{ matrix.schemes }} analysis

  TestPods:
    name: Testing Pods
    runs-on: macos-latest
    needs: [Setup]
    strategy:
      fail-fast: false
      matrix:
        schemes: [uitests, uikit, swiftui]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Bundler install Gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ env.ImageVersion }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ env.ImageVersion }}

      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: Example/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Bundle Install
        run: bundle install --jobs 4 --retry 3

      - name: Pod Install
        run: bundle exec pod install
        working-directory: Example

      - name: Select Xcode 14
        run: sudo xcode-select --switch /Applications/Xcode_14.2.app

      - name: Run Tests
        run: ./scripts/ci ${{ matrix.schemes }} test

  UploadArtifacts:
    name: Upload Artifacts
    runs-on: macos-latest
    needs: [TestPods]
    steps:
      - name: Save assets
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: FailureDiffs
          path: Example/BackpackTests/FailureDiffs
