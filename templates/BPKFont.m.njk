// clang-format off
/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2018-2019 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import "BPKFont.h"
#import "../BPKFontMapping.h"

#import <Backpack/Color.h>
#import <Backpack/Theme.h>

NS_ASSUME_NONNULL_BEGIN

@interface BPKFont()
@property(nonatomic, strong, readonly) NSCache<NSString *, NSDictionary *> *attributesCache;
@end

@implementation BPKFont

+ (UIFont * _Nullable)fontWithStyle:(BPKFontStyle)style {
    switch (style) {
    {% for f in font %}
        case {{f.enumName}}:
            return [BPKFont {{f.name}}];{% endfor %}
    }

    return nil;
}

{% for f in font %}
+ (UIFont *){{f.name}} {
    return [UIFont systemFontOfSize:{{f.size}} weight:{{f.weight}}];
}
{% endfor %}

+ (NSAttributedString *)attributedStringWithFontStyle:(BPKFontStyle)fontStyle
                                              content:(NSString *)content
                                          fontMapping:(BPKFontMapping *_Nullable)fontMapping {
    NSDictionary *attributes = [self attributesForFontStyle:fontStyle fontMapping:fontMapping];
    NSAttributedString *attributedString = [[NSAttributedString alloc] initWithString:content attributes:attributes];

    return attributedString;
}

+ (NSAttributedString *)attributedStringWithFontStyle:(BPKFontStyle)fontStyle
                                              content:(NSString *)content
                                            textColor:(UIColor *)textColor
                                          fontMapping:(BPKFontMapping *_Nullable)fontMapping {
    NSMutableDictionary *attributes = [[self attributesForFontStyle:fontStyle fontMapping:fontMapping] mutableCopy];
    [attributes setObject:textColor forKey:NSForegroundColorAttributeName];
    NSAttributedString *attributedString = [[NSAttributedString alloc] initWithString:content attributes:[attributes copy]];


    return attributedString;
}


#pragma mark - Private

+ (NSCache<NSString *, NSDictionary *> *)attributesCache {
    static dispatch_once_t onceToken;
    static NSCache *_attributesCache = nil;
    dispatch_once(&onceToken, ^{
        _attributesCache = [[NSCache alloc] init];
    });

    return _attributesCache;
}

+ (NSDictionary<NSAttributedStringKey, id> *)attributesForFontStyle:(BPKFontStyle)fontStyle
                                               withCustomAttributes:(NSDictionary<NSAttributedStringKey,id> *)customAttributes
                                                        fontMapping:(BPKFontMapping *_Nullable)fontMapping {
    NSMutableDictionary<NSAttributedStringKey, id> *attributes = [[self attributesForFontStyle:fontStyle fontMapping:fontMapping] mutableCopy];

    for (NSAttributedStringKey key in customAttributes) {
        if ([key isEqualToString:NSKernAttributeName] || [key isEqualToString:NSFontAttributeName]) {
            // We explicitly ignore these as they would change the look of the rendered text significantly
            // enough that it would no longer be the Backpack style.
            continue;
        }

        [attributes setObject:customAttributes[key] forKey:key];
    }

    return [attributes copy];
}

+ (NSDictionary<NSAttributedStringKey, id> *)attributesForFontStyle:(BPKFontStyle)style fontMapping:(BPKFontMapping *_Nullable)fontMapping {
    NSString *cacheKey = [self cacheKeyForFontStyle:style andFontMapping:fontMapping];
    NSDictionary *potentialCacheHit = [[self attributesCache] objectForKey:cacheKey];

    if (potentialCacheHit) {
        return potentialCacheHit;
    }

    UIFont *font = [self fontWithName:fontMapping forStyle:style];
    NSNumber *_Nullable tracking = [self trackingForStyle:style fontMapping:fontMapping];
    NSDictionary *result;

    if (tracking != nil) {
        result = @{
                   NSKernAttributeName: tracking,
                   NSForegroundColorAttributeName: BPKColor.gray700,
                   NSFontAttributeName: font,
                   };

    } else {
        result = @{
                   NSForegroundColorAttributeName: BPKColor.gray700,
                   NSFontAttributeName: font,
                   };
   }


    [[self attributesCache] setObject:result forKey:cacheKey];

    return result;
}

+ (NSString *)cacheKeyForFontStyle:(BPKFontStyle)style andFontMapping:(BPKFontMapping *_Nullable)fontMapping {
    if (fontMapping != nil) {
        return [NSString stringWithFormat:@"%ld_%@", (unsigned long)style, fontMapping.family];
    }

    return [NSString stringWithFormat:@"%ld", (unsigned long)style];
}

+ (UIFont *)fontForStyle:(BPKFontStyle)style {
    switch (style) {
        {% for f in font %}
            case {{f.enumName}}:
                return [UIFont systemFontOfSize:{{f.size}} weight:{{f.weight}}];{% endfor %}
            default:
              NSAssert(NO, @"Unknown fontStyle %ld", (unsigned long)style);
    }
}

+ (UIFont *)fontWithName:(BPKFontMapping *)fontMapping forStyle:(BPKFontStyle)style {
    if (fontMapping == nil) {
        return [self fontWithStyle:style];
    }

    switch (style) {
       {% for f in font %}
           case {{f.enumName}}:
             {% if f.enumName.includes("Heavy") -%}
               return [UIFont fontWithName:fontMapping.heavyFontFace size:{{f.size}}];
             {% elif f.enumName.includes("Emphasized") -%}
               return [UIFont fontWithName:fontMapping.semiboldFontFace size:{{f.size}}];
             {% else -%}
               return [UIFont fontWithName:fontMapping.regularFontFace size:{{f.size}}];
             {% endif %}{% endfor %}
            default:
              NSAssert(NO, @"Unknown fontStyle %ld", (unsigned long)style);
    }
}

+ (NSNumber *_Nullable)trackingForStyle:(BPKFontStyle)style fontMapping:(BPKFontMapping *_Nullable)fontMapping {
    if (fontMapping != nil) {
        return nil;
    }

    switch (style) {
        {% for f in font %}
            case {{f.enumName}}:
              {% if f.trackingAdjustment or f.trackingAdjustment == 0 -%}
                return @({{f.trackingAdjustment}});
              {% else -%}
                return  nil;
              {% endif %}{% endfor %}
            default:
              NSAssert(NO, @"Unknown fontStyle %ld", (unsigned long)style);
    }
}

@end
NS_ASSUME_NONNULL_END
// clang-format on
