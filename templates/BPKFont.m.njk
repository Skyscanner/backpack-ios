// clang-format off
/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2018-2019 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import "BPKFont.h"

#import <Backpack/Color.h>
#import <Backpack/Theme.h>

#import "../BPKFontMapping.h"

NS_ASSUME_NONNULL_BEGIN

@interface BPKFont()
@end

@implementation BPKFont

+ (UIFont * _Nullable)systemFontWithStyle:(BPKFontStyle)style {
    switch (style) {
    {% for f in font %}
        case {{f.enumName}}:
            return [BPKFont {{f.name}}];{% endfor %}
    }

    return nil;
}

{% for f in font %}
+ (UIFont *){{f.name}} {
    return [UIFont systemFontOfSize:{{f.size}} weight:{{f.weight}}];
}
{% endfor %}

+ (NSDictionary<NSAttributedStringKey, id> *)attributesForFontStyle:(BPKFontStyle)style fontMapping:(BPKFontMapping * _Nullable)fontMapping {
    return [self attributesForFontStyle:style];
}

+ (NSAttributedString *)attributedStringWithFontStyle:(BPKFontStyle)fontStyle
                                              content:(NSString *)content fontMapping:(BPKFontMapping *_Nullable)fontMapping {
  return [self attributedStringWithFontStyle:fontStyle content:content];
}

+ (NSAttributedString *)attributedStringWithFontStyle:(BPKFontStyle)fontStyle
                                              content:(NSString *)content
                                            textColor:(UIColor *)textColor
                                          fontMapping:(BPKFontMapping *_Nullable)fontMapping {
  return [self attributedStringWithFontStyle:fontStyle content:content textColor:textColor fontMapping:fontMapping];
}

+ (NSAttributedString *)attributedStringWithFontStyle:(BPKFontStyle)fontStyle
                                              content:(NSString *)content {
    NSDictionary *attributes = [self attributesForFontStyle:fontStyle];
    NSAttributedString *attributedString = [[NSAttributedString alloc] initWithString:content attributes:attributes];

    return attributedString;
}

+ (NSDictionary<NSAttributedStringKey, id> *)attributesForFontStyle:(BPKFontStyle)fontStyle
                                               withCustomAttributes:(NSDictionary<NSAttributedStringKey,id> *)customAttributes fontMapping:(BPKFontMapping * _Nullable)fontMapping {
    return [self attributesForFontStyle:fontStyle withCustomAttributes:customAttributes];
}

+ (NSAttributedString *)attributedStringWithFontStyle:(BPKFontStyle)fontStyle
                                              content:(NSString *)content
                                            textColor:(UIColor *)textColor {
    NSMutableDictionary *attributes = [[self attributesForFontStyle:fontStyle] mutableCopy];
    [attributes setObject:textColor forKey:NSForegroundColorAttributeName];
    NSAttributedString *attributedString = [[NSAttributedString alloc] initWithString:content attributes:[attributes copy]];


    return attributedString;
}

#pragma mark - Private

+ (NSDictionary<NSAttributedStringKey, id> *)attributesForFontStyle:(BPKFontStyle)fontStyle
                                               withCustomAttributes:(NSDictionary<NSAttributedStringKey,id> *)customAttributes {
    NSMutableDictionary<NSAttributedStringKey, id> *attributes = [[self attributesForFontStyle:fontStyle] mutableCopy];

    for (NSAttributedStringKey key in customAttributes) {
        if ([key isEqualToString:NSKernAttributeName] || [key isEqualToString:NSFontAttributeName]) {
            // We explicitly ignore these as they would change the look of the rendered text significantly
            // enough that it would no longer be the Backpack style.
            continue;
        }

        [attributes setObject:customAttributes[key] forKey:key];
    }

    return [attributes copy];
}

+ (NSDictionary<NSAttributedStringKey, id> *)attributesForFontStyle:(BPKFontStyle)style {
    UIFont *font = [self fontForStyle:style];
    NSDictionary *result = @{
                   NSForegroundColorAttributeName: BPKColor.textPrimaryColor,
                   NSFontAttributeName: font,
                   };

    return result;
}

+ (UIFont *)fontForStyle:(BPKFontStyle)style {
#ifdef USE_SKYSCANNER_RELATIVE_FONT
    UIFont *font = [self relativeFontForStyle:style];
    NSAssert(font != nil, @"Skyscanner Relative font is not available! Falling back to system fontface.");
    if(font != nil) {
        return font;
    }
#endif
    return [self systemFontWithStyle:style];
}

+ (UIFont *_Nullable)relativeFontForStyle:(BPKFontStyle)style {
    switch (style) {
       {% for f in font %}
           case {{f.enumName}}:
             {% if f.enumName.includes("Heavy") -%}
               return [UIFont fontWithName:@"SkyscannerRelativeiOS-Black" size:{{f.size}}];
             {% elif f.enumName.includes("Emphasized") -%}
               return [UIFont fontWithName:@"SkyscannerRelativeiOS-Bold" size:{{f.size}}];
             {% else -%}
               return [UIFont fontWithName:@"SkyscannerRelativeiOS-Book" size:{{f.size}}];
             {% endif %}{% endfor %}
            default:
              NSAssert(NO, @"Unknown fontStyle %ld", (unsigned long)style);
    }
}

@end
NS_ASSUME_NONNULL_END
// clang-format on
