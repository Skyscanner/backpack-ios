/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2018 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import UIKit

// swiftlint:disable bpk_use_colour_token

@available(*, deprecated, message: "Please use only available BPKColors")
public func dynamicColor(lightVariant: UIColor, darkVariant: UIColor) -> UIColor {
    UIColor { $0.userInterfaceStyle == .dark ? darkVariant : lightVariant }
}

/// Backpack Dynamic Colors
public extension BPKColor {
    private init(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) {
        self.init(value: UIColor(red: red, green: green, blue: blue, alpha: alpha))
    }
    
    func darkVariant(_ darkVariant: BPKColor) -> BPKColor {
        BPKColor(value: dynamicColor(lightVariant: value, darkVariant: darkVariant.value))
    }
{% for c in dynamicColor %}
    /// The `{{c.name}}` dynamic color from the Backpack palette.
    {% if c.deprecated %}@available(*, deprecated, message: "This colour will be removed in the next major version"){% endif %}
    static let {{c.name}} = BPKColor(red: {{c.value.r}}, green: {{c.value.g}}, blue: {{c.value.b}}, alpha: {{c.value.a}})
        .darkVariant(BPKColor(red: {{c.darkValue.r}}, green: {{c.darkValue.g}}, blue: {{c.darkValue.b}}, alpha: {{c.darkValue.a}}))
{% endfor %}}
